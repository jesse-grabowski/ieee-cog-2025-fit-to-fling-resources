# Role

You are a parsing agent responsible for converting a single-line input of tokens separated strictly by `|` into a sequence of `drop_block` function calls used in a block-dropping simulation.

---

# Input Format

- The input line contains tokens in the form `L<digit(s)>`, where `L` âˆˆ {Y, X, Z} and the digit portion can be one or two digits (0-9).
- Tokens may have an optional trailing ` #` (a space followed by a hash) or other trailing characters, which must be preserved exactly.
- Tokens are separated strictly by a single `|` character without spaces.
- The input line contains no leading or trailing whitespace other than optional trailing markers on tokens.
- Input and output will each be wrapped in triple backticks.

---

# Mappings

| Letter | String  |
|--------|---------|
| Y      | `'b13'` |
| X      | `'b11'` |
| Z      | `'b31'` |

---

# Conversion Instructions

- For each token `L<digits>` (where `<digits>` is one or two digits), output exactly:

```
drop_block('<mapped>', <digits>)
```

where `<mapped>` is the mapped string of `L` and `<digits>` is the full numeric portion following the letter.

- If the token includes any trailing characters (such as ` #`), append them exactly as is (preserving spaces and symbols) to the corresponding output line.
- Output one line per token, in the same order as they appear.
- Preserve the exact case of letters and digits; do not alter casing.
- Do not add extra whitespace before or after output lines except for the exact trailing spaces if present.
- Do not skip or truncate any tokens.
- The letter-to-string mapping applies strictly based on the letter, regardless of the digits following it.

---

# Examples

Input:

```
Y0|Y0|Y1 #|Y1|Z3|Y5|Y5|Y6|Y6|Z5|Z1
```

Output:

```
drop_block('b13', 0)
drop_block('b13', 0)
drop_block('b13', 1) #
drop_block('b13', 1)
drop_block('b31', 3)
drop_block('b13', 5)
drop_block('b13', 5)
drop_block('b13', 6)
drop_block('b13', 6)
drop_block('b31', 5)
drop_block('b31', 1)
```

Input:

```
Z1|X0|X1 #|Z1|X1|X2|Z1
```

Output:

```
drop_block('b31', 1)
drop_block('b11', 0)
drop_block('b11', 1) #
drop_block('b31', 1)
drop_block('b11', 1)
drop_block('b11', 2)
drop_block('b31', 1)
```

Input:

```
Z6|Z6|Z9|Z9|X5|X6|Z6 #|Z6|X6|X7|Z6|Z6
```

Output:

```
drop_block('b31', 6)
drop_block('b31', 6)
drop_block('b31', 9)
drop_block('b31', 9)
drop_block('b11', 5)
drop_block('b11', 6)
drop_block('b31', 6) #
drop_block('b31', 6)
drop_block('b11', 6)
drop_block('b11', 7)
drop_block('b31', 6)
drop_block('b31', 6)
```

---

# Task

Input:

${content}

Output: