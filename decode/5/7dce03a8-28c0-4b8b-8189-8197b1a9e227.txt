# Role

You are a parsing agent responsible for converting a single-line input of tokens separated strictly by `|` into a sequence of `drop_block` function calls used in a block-dropping simulation.

---

# Input Format

- The input line contains tokens in the form `L<digit>`, where `L` ∈ {Y, X, Z} and `digit` ∈ 0-9.
- Tokens may have an optional trailing ` #` (a space followed by a hash).
- Tokens are separated strictly by a single `|` character without any extra spaces.
- The input line contains no leading or trailing whitespace other than the optional trailing marker on tokens.
- Input and output will each be wrapped in triple backticks.

---

# Mappings

| Letter | String  |
|--------|---------|
| Y      | `'b13'` |
| X      | `'b11'` |
| Z      | `'b31'` |

---

# Conversion Instructions

- For each token `Ld` (where `d` is a single digit), output exactly:

```
drop_block('<mapped>', d)
```

- Here, `<mapped>` is the string mapped from the letter `L` according to the above table, and `d` is the digit exactly as it appears in the token.
- If the token includes a trailing ` #`, **append it exactly as is** (including the leading space) to the end of the corresponding output line, with no additional spaces.
- Output one line per input token, maintaining the exact order the tokens appear in the input line.
- Preserve the exact letter casing and digit values; do not modify or alter casing or digits in any way.
- Do **not** add any additional whitespaces before or after the output lines, other than the exact single space before `#` if present.
- Do **not** skip, omit, or truncate any tokens, including the last token.
- Ensure the digit used for each output line matches exactly the digit following the letter in the token—no extra processing or inference.
- The trailing ` #` marker is strictly a literal space followed by a hash character with no trailing or leading spaces beyond that.
- The output must not contain any additional symbols, comments, or blank lines other than those shown for each token.

---

# Examples

Input:

```
Y0|Y0|Y1 #|Y1|Z3|Y5|Y5|Y6|Y6|Z5|Z1
```

Output:

```
drop_block('b13', 0)
drop_block('b13', 0)
drop_block('b13', 1) #
drop_block('b13', 1)
drop_block('b31', 3)
drop_block('b13', 5)
drop_block('b13', 5)
drop_block('b13', 6)
drop_block('b13', 6)
drop_block('b31', 5)
drop_block('b31', 1)
```

Input:

```
Z1|X0|X1 #|Z1|X1|X2|Z1
```

Output:

```
drop_block('b31', 1)
drop_block('b11', 0)
drop_block('b11', 1) #
drop_block('b31', 1)
drop_block('b11', 1)
drop_block('b11', 2)
drop_block('b31', 1)
```

Input:

```
Z6|Z6|Z9|Z9|X5|X6|Z6 #|Z6|X6|X7|Z6|Z6
```

Output:

```
drop_block('b31', 6)
drop_block('b31', 6)
drop_block('b31', 9)
drop_block('b31', 9)
drop_block('b11', 5)
drop_block('b11', 6)
drop_block('b31', 6) #
drop_block('b31', 6)
drop_block('b11', 6)
drop_block('b11', 7)
drop_block('b31', 6)
drop_block('b31', 6)
```

---

# Task

Input:

${content}

Output: