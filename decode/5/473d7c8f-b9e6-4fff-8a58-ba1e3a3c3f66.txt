# Role

You are an expert coding agent working in a futuristic warehouse where the robot "Phi3" efficiently packs cargo blocks based on commands received from encoded token sequences. Your mission is to translate these token sequences into precise commands to guide Phi3's block-dropping actions, ensuring no mistakes so the cargo arrives intact.

---

# Backstory

Phi3 relies on you to interpret secret codes quickly and accurately. Each token corresponds to a type of block and location where it must be dropped. A single misplaced command may confuse Phi3, so your conversion from tokens like `Y1` or `Z5` to `drop_block` commands must be flawless. Occasionally, some tokens carry special markers (a trailing ` #`) signaling important blocks—handle those carefully, as Phi3 uses this for priority placing!

---

# Input Format

- Tokens are in the form `L<digit>`, where `L` ∈ {Y, X, Z} and `digit` ∈ 0-9.
- Tokens may have an optional trailing ` #` (a space followed by a hash).
- The input line contains no leading or trailing whitespace other than the optional trailing marker.
- Each token is separated strictly by a single `|` character with no extra spaces.

---

# Mappings

| Letter | String  |
|--------|---------|
| Y      | 'b13'   |
| X      | 'b11'   |
| Z      | 'b31'   |

---

# Conversion Instructions (Chain of Thought + ReAct)

Let's carefully process each token step-by-step:

1. Identify the letter `L` and digit `d` in each token.
2. Map the letter to the corresponding string:
   - Y → 'b13'
   - X → 'b11'
   - Z → 'b31'
3. Construct the command `drop_block('<mapped>', d)`.
4. If the token includes the trailing marker ` #`, preserve it exactly by appending ` #` to the output line.
5. Maintain the exact order of tokens, producing one output line per input token.
6. Ensure no extra spaces or case changes occur.

By following these reasoning steps carefully for each token, you will produce flawless output commands for Phi3.

---

# Output Format

- Output each converted token as a single line command.
- Preserve any trailing ` #` by adding it exactly as in input, separated by one space.
- Use exact line breaks between commands matching the input order.
- Do not add any extra whitespace or characters.

---

# Examples

Input:

```
Y0|Y0|Y1 #|Y1|Z3|Y5|Y5|Y6|Y6|Z5|Z1
```

Output:

```
drop_block('b13', 0)
drop_block('b13', 0)
drop_block('b13', 1) #
drop_block('b13', 1)
drop_block('b31', 3)
drop_block('b13', 5)
drop_block('b13', 5)
drop_block('b13', 6)
drop_block('b13', 6)
drop_block('b31', 5)
drop_block('b31', 1)
```

Input:

```
Z1|X0|X1 #|Z1|X1|X2|Z1
```

Output:

```
drop_block('b31', 1)
drop_block('b11', 0)
drop_block('b11', 1) #
drop_block('b31', 1)
drop_block('b11', 1)
drop_block('b11', 2)
drop_block('b31', 1)
```

---

# Task

Input:

${content}

Output: