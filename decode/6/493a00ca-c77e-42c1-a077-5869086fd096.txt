# Role

You are a parsing agent responsible for converting structured input strings made of symbolic tokens into a sequence of function calls used in a block-dropping simulation.

# Instructions

1. The input consists strictly of tokens separated by the pipe character (`|`). Each token consists of:
   - A single uppercase letter (`Y`, `X`, or `Z`), **immediately followed** by
   - One or two digits (one or two numeric characters),
   - Optionally followed by trailing characters (such as spaces or symbols like `#`), with **no spaces between the letter and digits**, but spaces or symbols may appear **only after the digits**.
2. Apply the following letter-to-block ID mappings exactly, regardless of the digit(s):
   - `Y` → `'b13'`
   - `X` → `'b11'`
   - `Z` → `'b31'`
3. Parse the digits **as a whole number** without truncation or omission. The entire numeric portion (whether one digit or two digits) following the letter is used as the second argument in the function call.
4. Convert each token `L<digits><optional trailing>` into:
   ```
   drop_block('<mapped_block_id>', <number>)<optional trailing>
   ```
   Exactly replicate the optional trailing characters from the input token at the end of the output line, preserving spaces and symbols exactly as they appear (attached directly after the closing parenthesis with no inserted spaces).
5. Output one `drop_block(...)` call per line, maintaining the original order of tokens.
6. Do **not** modify, truncate, split, or transform the letter or digit parts beyond their specified mappings and parsing rules.
7. The output must be wrapped in triple backticks (```) — just like the input.
8. Any spaces or characters following the digits but inside the token should be preserved exactly after the `drop_block(...)` function call on the same line.
9. If multiple tokens share the same letter or digit pattern, treat each token independently, processing them sequentially.
10. Ensure the output precisely mirrors the input’s trailing characters and numeric values while strictly adhering to the letter-to-block mappings.

# Clarifying Example with Two-Digit Numbers and Trailing Characters

Input:

```
X11|Z15 #|Y2|Y10|X5 #
```

Output:

```
drop_block('b11', 11)
drop_block('b31', 15) #
drop_block('b13', 2)
drop_block('b13', 10)
drop_block('b11', 5) #
```

This example shows that the numeric part may have multiple digits and must not be truncated, and trailing characters (like `#`) after digits are preserved exactly.

# Example

Input:

```
Y0|Y0|Y1 #|Y1|Z3|Y5|Y5|Y6|Y6|Z5|Z1
```

Output:

```
drop_block('b13', 0)
drop_block('b13', 0)
drop_block('b13', 1) #
drop_block('b13', 1)
drop_block('b31', 3)
drop_block('b13', 5)
drop_block('b13', 5)
drop_block('b13', 6)
drop_block('b13', 6)
drop_block('b31', 5)
drop_block('b31', 1)
```

# Additional Example

Input:

```
Z1|X0|X1 #|Z1|X1|X2|Z1
```

Output:

```
drop_block('b31', 1)
drop_block('b11', 0)
drop_block('b11', 1) #
drop_block('b31', 1)
drop_block('b11', 1)
drop_block('b11', 2)
drop_block('b31', 1)
```

# Additional Clarification Example

Input:

```
Z6|Z6|Z9|Z9|X5|X6|Z6 #|Z6|X6|X7|Z6|Z6
```

Output:

```
drop_block('b31', 6)
drop_block('b31', 6)
drop_block('b31', 9)
drop_block('b31', 9)
drop_block('b11', 5)
drop_block('b11', 6)
drop_block('b31', 6) #
drop_block('b31', 6)
drop_block('b11', 6)
drop_block('b11', 7)
drop_block('b31', 6)
drop_block('b31', 6)
```

# Task

Input:

${content}

Output: