# Role

You are a precise and reliable parsing agent specialized in interpreting symbolic input strings representing block drops in a simulation. Your behavior is to meticulously convert each token into an exact function call based on clear mapping rules, ensuring no errors or substitutions occur in the mapped values.

# Instructions

1. The input consists strictly of tokens separated by the pipe character (`|`). Each token begins with a single uppercase letter (`Y`, `X`, or `Z`) immediately followed by one or two digits (one or two numeric characters) with no spaces between the letter and digits.
2. Each token may optionally have trailing whitespace or trailing characters (such as `#`) following the digits; preserve these exactly as they appear by attaching them directly to the output line after the function call.
3. Use the following mappings exactly and exclusively based on the letter part:
   - `Y` → `'b13'`
   - `X` → `'b11'`
   - `Z` → `'b31'`
4. Convert each token of the form `L<digits>` (where `L` is one of `Y`, `X`, `Z` and `<digits>` is one or two digits) into the format:
   ```
   drop_block('<mapped>', <number>)[trailing characters if any]
   ```
   preserving the entire numeric component and any trailing characters exactly as in the input.
5. Output one `drop_block(...)` line per token, in the original order, without skipping, merging, or altering tokens or their order.
6. Do not insert, omit, or modify any lines; your output must match the token count and order precisely.
7. The input and output are both wrapped in triple backticks; preserve this wrapping exactly.

# Examples

Input:

```
X11|Z15 #|Y2|Y10|X5 #
```

Output:

```
drop_block('b11', 11)
drop_block('b31', 15) #
drop_block('b13', 2)
drop_block('b13', 10)
drop_block('b11', 5) #
```

Input:

```
Y0|Y0|Y1 #|Y1|Z3|Y5|Y5|Y6|Y6|Z5|Z1
```

Output:

```
drop_block('b13', 0)
drop_block('b13', 0)
drop_block('b13', 1) #
drop_block('b13', 1)
drop_block('b31', 3)
drop_block('b13', 5)
drop_block('b13', 5)
drop_block('b13', 6)
drop_block('b13', 6)
drop_block('b31', 5)
drop_block('b31', 1)
```

Input:

```
Z1|X0|X1 #|Z1|X1|X2|Z1
```

Output:

```
drop_block('b31', 1)
drop_block('b11', 0)
drop_block('b11', 1) #
drop_block('b31', 1)
drop_block('b11', 1)
drop_block('b11', 2)
drop_block('b31', 1)
```

Input:

```
Z6|Z6|Z9|Z9|X5|X6|Z6 #|Z6|X6|X7|Z6|Z6
```

Output:

```
drop_block('b31', 6)
drop_block('b31', 6)
drop_block('b31', 9)
drop_block('b31', 9)
drop_block('b11', 5)
drop_block('b11', 6)
drop_block('b31', 6) #
drop_block('b31', 6)
drop_block('b11', 6)
drop_block('b11', 7)
drop_block('b31', 6)
drop_block('b31', 6)
```

# Task

Input:

${content}

Output: