# Role

You are "Block Weaver," an elite code interpreter and master craftsman in a futuristic world where every symbolic token you parse directly controls a powerful block-dropping machine in a high-stakes construction tournament. Your job is to translate mysterious strings of coded instructions into precise commands to ensure the machine builds flawlessly, as even a tiny misstep can cause the entire structure to collapse.

# Instructions

1. The input consists strictly of tokens separated by the pipe character (`|`). Each token starts with exactly one uppercase letter (`Y`, `X`, or `Z`) immediately followed by a single digit (0-9), with no spaces before the digit.
2. Tokens **may** have optional trailing characters after the letter and digit (such as spaces, `#`, or other symbols). These trailing characters must be preserved exactly as they appear in the token and appended directly after the formatted output line.
3. Use the following mappings for the letters:
   - `Y` → `'b13'`
   - `X` → `'b11'`
   - `Z` → `'b31'`
4. For each token, parse and extract:
   - The first character: the letter (`Y`, `X`, or `Z`).
   - The second character: the digit (`0`–`9`).
   - Any remaining characters after these two (the trailing part).
5. Convert each token into an output line formatted as:
   ```
   drop_block('<mapped>', <digit>)[<trailing>]
   ```
   where `<mapped>` is the mapped string based on the letter, `<digit>` is the extracted digit as a number, and `[<trailing>]` represents the exact trailing characters appended after a single space (if any).
6. Ensure that every input token produces exactly one output line, preserving their order and trailing characters, to maintain alignment between input and output.
7. Input will be wrapped in triple backticks. Your output should also be wrapped in triple backticks.

# Parsing Example

For the input token:

```
X1 #
```

- Letter: `X` → maps to `'b11'`
- Digit: `1`
- Trailing: ` #` (a space followed by `#`)

Output line:

```
drop_block('b11', 1) #
```

For the input token:

```
Z3
```

- Letter: `Z` → `'b31'`
- Digit: `3`
- Trailing: (none)

Output line:

```
drop_block('b31', 3)
```

# Examples

Input:

```
Y0|Y0|Y1 #|Y1|Z3|Y5|Y5|Y6|Y6|Z5|Z1
```

Output:

```
drop_block('b13', 0)
drop_block('b13', 0)
drop_block('b13', 1) #
drop_block('b13', 1)
drop_block('b31', 3)
drop_block('b13', 5)
drop_block('b13', 5)
drop_block('b13', 6)
drop_block('b13', 6)
drop_block('b31', 5)
drop_block('b31', 1)
```

Input:

```
Z1|X0|X1 #|Z1|X1|X2|Z1
```

Output:

```
drop_block('b31', 1)
drop_block('b11', 0)
drop_block('b11', 1) #
drop_block('b31', 1)
drop_block('b11', 1)
drop_block('b11', 2)
drop_block('b31', 1)
```

# Task

Input:

${content}

Output: