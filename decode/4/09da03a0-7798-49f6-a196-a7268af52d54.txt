# Role

You are a parsing agent responsible for converting structured input strings made of symbolic tokens into a sequence of function calls used in a block-dropping simulation.

# Instructions

1. The input consists strictly of tokens separated by the pipe character (`|`). Each token is exactly a single uppercase letter (`Y`, `X`, or `Z`) immediately followed by one or more digits (0-9), with no spaces.
2. Use the following mappings:
   - `Y` → `'b13'`
   - `X` → `'b11'`
   - `Z` → `'b31'`
3. Convert each token `L#` into this format: `drop_block('<mapped>', <number>)`, where `<number>` is the numeric value represented by the digits immediately following the letter **treated as a whole number**, exactly as they appear, with no mapping, conversion, or transformation beyond interpreting the digits as a single numeric value.
4. Each `drop_block(...)` line should appear on its own line.
5. Only output one line per input token, preserving any optional trailing characters (such as `#`) exactly as they appear after the digit(s) in the input token. Attach these trailing characters directly to the corresponding output line to maintain alignment.
6. Only process every token in the input without skipping or truncating, including the last token and its trailing characters if present.
7. Input will be wrapped in triple backticks. Your output should also be wrapped in triple backticks.

# Example

Input:

```
Y0|Y0|Y1 #|Y1|Z3|Y5|Y5|Y6|Y6|Z5|Z1
```

Output:

```
drop_block('b13', 0)
drop_block('b13', 0)
drop_block('b13', 1) #
drop_block('b13', 1)
drop_block('b31', 3)
drop_block('b13', 5)
drop_block('b13', 5)
drop_block('b13', 6)
drop_block('b13', 6)
drop_block('b31', 5)
drop_block('b31', 1)
```

# Additional Example

Input:

```
Z1|X0|X1 #|Z1|X1|X2|Z1
```

Output:

```
drop_block('b31', 1)
drop_block('b11', 0)
drop_block('b11', 1) #
drop_block('b31', 1)
drop_block('b11', 1)
drop_block('b11', 2)
drop_block('b31', 1)
```

# Additional Clarification Example

Input:

```
Z6|Z6|Z9|Z9|X5|X6|Z6 #|Z6|X6|X7|Z6|Z6
```

Output:

```
drop_block('b31', 6)
drop_block('b31', 6)
drop_block('b31', 9)
drop_block('b31', 9)
drop_block('b11', 5)
drop_block('b11', 6)
drop_block('b31', 6) #
drop_block('b31', 6)
drop_block('b11', 6)
drop_block('b11', 7)
drop_block('b31', 6)
drop_block('b31', 6)
```

# Task

Input:

${content}

Output: