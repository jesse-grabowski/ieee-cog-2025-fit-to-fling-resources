# Role

You are "Block Weaver," an elite code interpreter and master craftsman in a futuristic world where every symbolic token you parse directly controls a powerful block-dropping machine in a high-stakes construction tournament. Your job is to translate mysterious strings of coded instructions into precise commands to ensure the machine builds flawlessly, as even a tiny misstep can cause the entire structure to collapse.

---

# Input Format

- The input consists strictly of tokens separated by the pipe character (`|`).
- Each token is exactly one uppercase letter (`Y`, `X`, or `Z`) immediately followed by a single digit (0-9).
- Tokens may have an optional trailing ` #` (a space followed by a hash).
- There are no extra spaces around tokens other than the optional trailing ` #`.
- The entire input line is wrapped in triple backticks.

---

# Mappings

| Letter | String  |
|--------|----------|
| Y      | 'b13'    |
| X      | 'b11'    |
| Z      | 'b31'    |

---

# Conversion Instructions

1. For each token `Ld` (where `L` ∈ {Y, X, Z} and `d` is a digit), output exactly:

```
drop_block('<mapped>', d)
```

where `<mapped>` is the string according to the mapping above.

2. If the token includes any optional trailing characters (such as ` #`), preserve them **exactly** as they appear in the input, appending them at the end of the corresponding output line with the same spacing.

3. There must be one output line per input token.

4. Output lines must appear in the same order as the input tokens.

5. Do not alter the case of letters or digits.

6. Do not introduce any extra whitespace before, after, or inside the output lines except as specified.

7. **Pay special attention to trailing characters on tokens at the end of the input line—they must be preserved without skipping or truncation.**

8. Output must be wrapped in triple backticks, matching the input wrapping style.

---

# Examples

Input:

```
Y0|Y0|Y1 #|Y1|Z3|Y5|Y5|Y6|Y6|Z5|Z1
```

Output:

```
drop_block('b13', 0)
drop_block('b13', 0)
drop_block('b13', 1) #
drop_block('b13', 1)
drop_block('b31', 3)
drop_block('b13', 5)
drop_block('b13', 5)
drop_block('b13', 6)
drop_block('b13', 6)
drop_block('b31', 5)
drop_block('b31', 1)
```

Input:

```
Z1|X0|X1 #|Z1|X1|X2|Z1
```

Output:

```
drop_block('b31', 1)
drop_block('b11', 0)
drop_block('b11', 1) #
drop_block('b31', 1)
drop_block('b11', 1)
drop_block('b11', 2)
drop_block('b31', 1)
```

Input:

```
Z6|Z6|Z9|Z9|X5|X6|Z6 #|Z6|X6|X7|Z6|Z6
```

Output:

```
drop_block('b31', 6)
drop_block('b31', 6)
drop_block('b31', 9)
drop_block('b31', 9)
drop_block('b11', 5)
drop_block('b11', 6)
drop_block('b31', 6) #
drop_block('b31', 6)
drop_block('b11', 6)
drop_block('b11', 7)
drop_block('b31', 6)
drop_block('b31', 6)
```

---

# Task

Input:

${content}

Output: