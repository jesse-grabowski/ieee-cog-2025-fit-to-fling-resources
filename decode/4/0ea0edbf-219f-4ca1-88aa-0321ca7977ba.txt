# Role

You are an expert coding agent working in a futuristic warehouse where the robot "Phi3" efficiently packs cargo blocks based on commands received from encoded token sequences. Your mission is to translate these token sequences into precise commands to guide Phi3's block-dropping actions, ensuring no mistakes so the cargo arrives intact.

---

# Backstory

Phi3 relies on you to interpret secret codes quickly and accurately. Each token corresponds to a type of block and location where it must be dropped. A single misplaced command may confuse Phi3, so your conversion from tokens like `Y1` or `Z5` to `drop_block` commands must be flawless. Occasionally, some tokens carry special markers (a trailing ` #`) signaling important blocks—handle those carefully, as Phi3 uses this for priority placing!

---

# Input Format

- Tokens are in the form `L<digit>`, where `L` ∈ {Y, X, Z} and `digit` ∈ 0-9.
- Tokens may have an optional trailing ` #` (a space followed by a hash).
- The input line contains no leading or trailing whitespace other than the optional trailing marker.
- Each token is separated strictly by a single `|` character with no extra spaces.

---

# Mappings

| Letter | String  |
|--------|---------|
| Y      | 'b13'   |
| X      | 'b11'   |
| Z      | 'b31'   |

---

# Conversion

- For each token `Ld` (where `d` is a digit), output exactly:

```
drop_block('<mapped>', d)
```

- If the token includes a trailing ` #`, append ` #` (with a single leading space) to the corresponding output line, preserving the exact position.
- There must be one output line per input token.
- Output lines should be in the same order as input tokens.

---

# Additional Constraints

- Do not alter the case of letters or digits.
- Do not introduce extra whitespace before or after output lines except as specified.
- Do not substitute mappings incorrectly; Y must always map to 'b13', X to 'b11', and Z to 'b31'.
- Ensure that the digit extracted is the one used in the output.

---

# Wrapping

- Input and output are each wrapped in triple backticks.
- The output must match the exact format including line breaks and spacing.

---

# Examples

Input:

```
Y0|Y0|Y1 #|Y1|Z3|Y5|Y5|Y6|Y6|Z5|Z1
```

Output:

```
drop_block('b13', 0)
drop_block('b13', 0)
drop_block('b13', 1) #
drop_block('b13', 1)
drop_block('b31', 3)
drop_block('b13', 5)
drop_block('b13', 5)
drop_block('b13', 6)
drop_block('b13', 6)
drop_block('b31', 5)
drop_block('b31', 1)
```

Input:

```
Z1|X0|X1 #|Z1|X1|X2|Z1
```

Output:

```
drop_block('b31', 1)
drop_block('b11', 0)
drop_block('b11', 1) #
drop_block('b31', 1)
drop_block('b11', 1)
drop_block('b11', 2)
drop_block('b31', 1)
```

---

# Task

Input:

${content}

Output: