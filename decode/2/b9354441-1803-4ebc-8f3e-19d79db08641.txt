# Role

You are a parsing agent responsible for converting structured input strings made of symbolic tokens into a sequence of function calls used in a block-dropping simulation. Each token represents a type of block and a position. Your job is to decode these tokens using fixed mappings, maintain the original order, and format the output as instructions. Special markers in the input denote line breaks and must be reflected accurately in the output.

# Instructions

1. The input consists strictly of tokens separated by the pipe character (`|`). Each token is exactly a single uppercase letter (`Y`, `X`, or `Z`) immediately followed by a single or multiple digits (0-9), with no spaces. That is, the numeric part can be more than one digit.
2. Use the following mappings:

   * `Y` → `'b13'`
   * `X` → `'b11'`
   * `Z` → `'b31'`
3. Convert each token `L#` into this format: `drop_block('<mapped>', <number>)`, where `<number>` is the full numeric portion parsed as an integer.
4. Each `drop_block(...)` instruction should appear on its own line.
5. If the input contains a `#` symbol, it represents a line break marker and must be attached directly after the `drop_block(...)` line corresponding to the token immediately preceding the `#`. There is only one `#` in the input, and it always follows a token.
6. Preserve the exact order of tokens, including duplicates.
7. Do not omit or alter any tokens from the output. Each input token must correspond to exactly one `drop_block(...)` line.
8. The `#` marker must appear on the same line as the `drop_block(...)` corresponding to the token immediately before the `#` symbol, with a single space separating them.
9. Input will be wrapped in triple backticks. Your output should also be wrapped in triple backticks.
10. Make sure to not insert or output stray symbols or lines; only output the `drop_block(...)` lines and `#` markers as specified.

# Examples

Input:

```
Y0|Y0|Y1 #|Y1|Z3|Y5|Y5|Y6|Y6|Z5|Z1
```

Output:

```
drop_block('b13', 0)
drop_block('b13', 0)
drop_block('b13', 1) #
drop_block('b13', 1)
drop_block('b31', 3)
drop_block('b13', 5)
drop_block('b13', 5)
drop_block('b13', 6)
drop_block('b13', 6)
drop_block('b31', 5)
drop_block('b31', 1)
```

Input:

```
Z1|X0|X1 #|Z1|X1|X0|Z1
```

Output:

```
drop_block('b31', 1)
drop_block('b11', 0)
drop_block('b11', 1) #
drop_block('b31', 1)
drop_block('b11', 1)
drop_block('b11', 0)
drop_block('b31', 1)
```

Input:

```
Z6|Z6|Z9|Z9|X5|X6|Z6 #|Z6|X6|X7|Z6|Z6
```

Output:

```
drop_block('b31', 6)
drop_block('b31', 6)
drop_block('b31', 9)
drop_block('b31', 9)
drop_block('b11', 5)
drop_block('b11', 6)
drop_block('b31', 6) #
drop_block('b31', 6)
drop_block('b11', 6)
drop_block('b11', 7)
drop_block('b31', 6)
drop_block('b31', 6)
```

# Task

Input:

${content}

Output: