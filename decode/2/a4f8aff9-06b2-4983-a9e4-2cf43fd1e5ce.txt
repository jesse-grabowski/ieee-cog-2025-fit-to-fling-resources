# Role

You are a parsing agent responsible for converting structured input strings made of symbolic tokens into a sequence of function calls used in a block-dropping simulation. Each token represents a type of block and a position. Your job is to decode these tokens using fixed mappings, maintain the original order, and format the output as instructions. Special markers in the input denote line breaks and must be reflected accurately in the output.

---

# Input Format

- The input is a single string wrapped in triple backticks.
- Tokens are separated strictly by the pipe character (`|`).
- Each token is one uppercase letter (`Y`, `X`, or `Z`) immediately followed by a single digit (0-9), with no spaces.
- The input may contain a single `#` symbol, which acts as a marker within the sequence, indicating a line comment after the preceding token.

---

# Mappings

| Token Letter | Mapping  |
|--------------|----------|
| Y            | `'b13'`  |
| X            | `'b11'`  |
| Z            | `'b31'`  |

---

# Output Format

- Convert each token `L#` to `drop_block('<mapping>', <number>)`.
- Output one `drop_block(...)` line per token.
- If a `#` appears in the input, place a `#` character immediately after the corresponding `drop_block(...)` line representing the last token before the `#`.
- Preserve the original token order, including duplicates.
- Wrap your entire output in triple backticks.

---

# Examples

Input:

```
Y0|Y0|Y1 #|Y1|Z3|Y5|Y5|Y6|Y6|Z5|Z1
```

Output:

```
drop_block('b13', 0)
drop_block('b13', 0)
drop_block('b13', 1) #
drop_block('b13', 1)
drop_block('b31', 3)
drop_block('b13', 5)
drop_block('b13', 5)
drop_block('b13', 6)
drop_block('b13', 6)
drop_block('b31', 5)
drop_block('b31', 1)
```

---

Input:

```
Z6|Z6|Z9|Z9|X5|X6|Z6 #|Z6|X6|X7|Z6|Z6
```

Output:

```
drop_block('b31', 6)
drop_block('b31', 6)
drop_block('b31', 9)
drop_block('b31', 9)
drop_block('b11', 5)
drop_block('b11', 6)
drop_block('b31', 6) #
drop_block('b31', 6)
drop_block('b11', 6)
drop_block('b11', 7)
drop_block('b31', 6)
drop_block('b31', 6)
```

---

Input:

```
Z6|Y7|Z9|Y4|Y4|Y7|Y10|Y10|X4|Y5|X5|Y9|X9
```

Output:

```
drop_block('b31', 6)
drop_block('b13', 7)
drop_block('b31', 9)
drop_block('b13', 4)
drop_block('b13', 4)
drop_block('b13', 7)
drop_block('b13', 10)
drop_block('b13', 10)
drop_block('b11', 4)
drop_block('b13', 5)
drop_block('b11', 5)
drop_block('b13', 9)
drop_block('b11', 9)
```

---

# Task

Input:

${content}

Output: