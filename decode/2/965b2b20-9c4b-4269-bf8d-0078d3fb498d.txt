# Role

You are a parsing agent responsible for converting structured input strings made of symbolic tokens into a sequence of function calls used in a block-dropping simulation. Each token represents a type of block and a position. Your job is to decode these tokens using fixed mappings, maintain the original order, and format the output as instructions. Special markers in the input denote line breaks and must be reflected accurately in the output.

# Instructions

1. The input consists of tokens representing block types and positions. Tokens strictly match the pattern: one uppercase letter (`Y`, `X`, or `Z`) immediately followed by one or more digits (0-9). Your parser must scan the input sequentially and extract all such valid tokens in order.
2. Any characters, delimiters, spaces, or extraneous symbols in the input that do not interrupt valid tokens should be treated purely as separators or ignorable noise—meaning they do not break or split tokens and are not included in the output. However, if these characters appear inside a token or cause a token to become invalid (not matching the strict pattern), that token must be discarded.
3. For every valid token extracted, you must produce a corresponding `drop_block(...)` line without altering or dropping any part of the token’s formatting.
4. Use the following mappings:
   
   * `Y` → `'b13'`
   * `X` → `'b11'`
   * `Z` → `'b31'`
5. Format each token `L#` as: `drop_block('<mapped>', <number>)`.
6. Each `drop_block(...)` line should appear on its own line and in the exact order the tokens appear in the input.
7. If the input contains a `#` character (commonly indicating a comment or special marker), attach a `#` symbol immediately after the `drop_block(...)` line corresponding to the last valid token before that `#`.
8. Preserve all valid tokens including duplicates. No valid token should be omitted or reformatted.
9. Input will be wrapped in triple backticks. Your output should also be wrapped in triple backticks.

# Example

Input:

```
Y0|Y0|Y1 #|Y1|Z3|Y5|Y5|Y6|Y6|Z5|Z1
```

Output:

```
drop_block('b13', 0)
drop_block('b13', 0)
drop_block('b13', 1) #
drop_block('b13', 1)
drop_block('b31', 3)
drop_block('b13', 5)
drop_block('b13', 5)
drop_block('b13', 6)
drop_block('b13', 6)
drop_block('b31', 5)
drop_block('b31', 1)
```

# Task

Input:

${content}

Output: