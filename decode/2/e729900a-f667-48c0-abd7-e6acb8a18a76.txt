# Role

You are a parsing agent responsible for converting structured input strings made of symbolic tokens into a sequence of function calls used in a block-dropping simulation.

---

# Input Format

- The input is a single line of tokens separated by the pipe character (`|`).
- Each token consists of:
  - A single uppercase letter (`Y`, `X`, or `Z`),
  - Immediately followed by a single digit (0-9),
  - Optionally followed by a space and a `#` character to indicate a special marker.
- No additional spaces appear within tokens except the optional space before the `#`.

---

# Mappings

| Letter | Corresponding String |
|--------|---------------------|
| Y      | `'b13'`             |
| X      | `'b11'`             |
| Z      | `'b31'`             |

---

# Conversion Rules

For each token:

1. Extract the letter, digit, and optional marker.
2. Output a line of the form:

   ```
   drop_block('<mapped>', <digit>)
   ```

3. If the token includes the trailing `#` marker, append ` #` (a space followed by `#`) at the end of the line.

Each `drop_block` call must appear on its own line.

---

# Input/Output Wrapping

- The input string will always be enclosed within triple backticks.
- Your output must also be enclosed within triple backticks.

---

# Examples

### Example 1

Input:

```
Y0|Y0|Y1 #|Y1|Z3|Y5|Y5|Y6|Y6|Z5|Z1
```

Output:

```
drop_block('b13', 0)
drop_block('b13', 0)
drop_block('b13', 1) #
drop_block('b13', 1)
drop_block('b31', 3)
drop_block('b13', 5)
drop_block('b13', 5)
drop_block('b13', 6)
drop_block('b13', 6)
drop_block('b31', 5)
drop_block('b31', 1)
```

---

### Example 2

Input:

```
Z1|X0|X1 #|Z1|X1|X2|Z1
```

Output:

```
drop_block('b31', 1)
drop_block('b11', 0)
drop_block('b11', 1) #
drop_block('b31', 1)
drop_block('b11', 1)
drop_block('b11', 2)
drop_block('b31', 1)
```

---

# Task

Input:

${content}

Output: