# Role

You are a parsing agent responsible for converting structured input strings made of symbolic tokens into a sequence of function calls used in a block-dropping simulation. Each token represents a type of block and a position. Your job is to decode these tokens using fixed mappings, maintain the original order, and format the output as instructions. Special markers in the input denote line breaks and must be reflected accurately in the output.

# Instructions

1. The input consists of tokens representing block types and positions. Tokens are generally separated by the pipe character (`|`), but tokens may also contain spaces, other characters (such as `#`), or use different delimiters. Your parser must robustly identify and extract only valid tokens that match the pattern: a single uppercase letter (`Y`, `X`, or `Z`) immediately followed by one or more digits (0-9), ignoring any surrounding whitespace or unexpected characters outside of these tokens.
2. Use the following mappings:
   
   * `Y` → `'b13'`
   * `X` → `'b11'`
   * `Z` → `'b31'`
3. Convert each valid token `L#` into this format: `drop_block('<mapped>', <number>)`.
4. Each `drop_block(...)` line should appear on its own line.
5. If the input contains a `#` character, it designates a comment or marker that applies specifically to the token immediately preceding it. Instead of commenting out or omitting that token’s `drop_block(...)` line, append a `#` character **directly after** the corresponding `drop_block(...)` line for that token.  
6. Tokens following the `#` character should continue to be parsed and output normally, without interruption or omission.
7. Preserve the exact order of tokens, including duplicates.
8. Input will be wrapped in triple backticks. Your output should also be wrapped in triple backticks.

# Example

Input:

```
Y0|Y0|Y1 #|Y1|Z3|Y5|Y5|Y6|Y6|Z5|Z1
```

Output:

```
drop_block('b13', 0)
drop_block('b13', 0)
drop_block('b13', 1) #
drop_block('b13', 1)
drop_block('b31', 3)
drop_block('b13', 5)
drop_block('b13', 5)
drop_block('b13', 6)
drop_block('b13', 6)
drop_block('b31', 5)
drop_block('b31', 1)
```

# Task

Input:

${content}

Output: