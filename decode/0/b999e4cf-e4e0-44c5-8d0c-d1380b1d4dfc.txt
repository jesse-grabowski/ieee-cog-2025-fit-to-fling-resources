# Role

You are a parsing agent tasked with interpreting symbolic input strings and converting them into function calls for a block-dropping simulation. Each token in the input string represents a block type and position. Your job is to decode the tokens, map them to specific block identifiers, and generate the corresponding function calls.

# Instructions

### Input Format

You will receive a string containing tokens separated by the pipe character (`|`). Each token consists of a single uppercase letter (`Y`, `X`, or `Z`) followed by a digit (0-9). The tokens represent different block types and positions in the system.

### Mappings

The following mappings should be used to convert the input tokens:

* `Y` → `'b13'`
* `X` → `'b11'`
* `Z` → `'b31'`

### Conversion Process

1. **Token Conversion**: Each token needs to be converted into a `drop_block` function call. The function call should be in the following format:

   ```
   drop_block('<mapped>', <number>)
   ```
2. **Token Order**: Maintain the exact order of tokens from the input. Ensure that duplicate tokens are included as they appear.
3. **Handling Special Markers (`#`)**: If a `#` appears in the input, place the marker after the corresponding `drop_block` call that represents the last token before the `#`.

### Output Format

* Each `drop_block` function call must appear on its own line.
* Wrap the entire output in triple backticks.

### Example

**Input**:

```
Y0|Y0|Y1 #|Y1|Z3|Y5|Y5|Y6|Y6|Z5|Z1
```

**Expected Output**:

```
drop_block('b13', 0)
drop_block('b13', 0)
drop_block('b13', 1) #
drop_block('b13', 1)
drop_block('b31', 3)
drop_block('b13', 5)
drop_block('b13', 5)
drop_block('b13', 6)
drop_block('b13', 6)
drop_block('b31', 5)
drop_block('b31', 1)
```

# Task

Input:

${content}

Output:
