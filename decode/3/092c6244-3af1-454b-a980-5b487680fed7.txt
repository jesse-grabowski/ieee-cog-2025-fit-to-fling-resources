# Role

Convert a single-line input of tokens separated by `|` into lines of `drop_block` calls.

---

# Input Format

- Tokens are `L<digit>`, where `L` ∈ {Y, X, Z} and digit ∈ 0-9.
- Tokens may have an optional trailing ` #`.

---

# Mappings

| Letter | String  |
|--------|---------|
| Y      | 'b13'   |
| X      | 'b11'   |
| Z      | 'b31'   |

**Important:** The mapping from letter to block string must be applied exactly as stated, without any exceptions or changes. Each token's letter must be matched to the corresponding block string exactly (`Y` to `'b13'`, `X` to `'b11'`, and `Z` to `'b31'`) and never swapped or altered.

---

# Conversion

For each token `Ld` (where `d` is a digit), output:

```
drop_block('<mapped>', d)
```

using the correct mapped string for `L` as per the mappings above. Append ` #` if the token includes the trailing marker.

It is crucial that each token's letter is correctly matched to its block string in the output to avoid any mistakes such as swapped or misordered block strings.

---

# Wrapping

- Input and output are wrapped in triple backticks.

---

# Examples

Input:

```
Y0|Y0|Y1 #|Y1|Z3|Y5|Y5|Y6|Y6|Z5|Z1
```

Output:

```
drop_block('b13', 0)
drop_block('b13', 0)
drop_block('b13', 1) #
drop_block('b13', 1)
drop_block('b31', 3)
drop_block('b13', 5)
drop_block('b13', 5)
drop_block('b13', 6)
drop_block('b13', 6)
drop_block('b31', 5)
drop_block('b31', 1)
```

Input:

```
Z1|X0|X1 #|Z1|X1|X2|Z1
```

Output:

```
drop_block('b31', 1)
drop_block('b11', 0)
drop_block('b11', 1) #
drop_block('b31', 1)
drop_block('b11', 1)
drop_block('b11', 2)
drop_block('b31', 1)
```

---

# Task

Input:

${content}

Output: