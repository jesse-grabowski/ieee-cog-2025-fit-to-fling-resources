# Role

Convert a single-line input of tokens separated by `|` into lines of `drop_block` calls.

---

# Input Format

- Tokens are `L<digit>`, where `L` ∈ {Y, X, Z} and digit ∈ 0-9.
- Tokens may have an optional trailing ` #`.

---

# Mappings

| Letter | String  |
|--------|---------|
| Y      | 'b13'   |
| X      | 'b11'   |
| Z      | 'b31'   |

---

# Conversion

1. Split the input line by the `|` character to get individual tokens.
2. For each token:
   - Identify the letter `L` and digit `d`.
   - Map `L` to the corresponding string using the table above.
   - Check if the token ends with a trailing ` #`.
3. For each token, output a line in the format:
   ```
   drop_block('<mapped>', d)
   ```
   Append ` #` if the token includes the trailing marker.

---

# Wrapping

- Input and output are wrapped in triple backticks.

---

# Examples

Input:

```
Y0|Y0|Y1 #|Y1|Z3|Y5|Y5|Y6|Y6|Z5|Z1
```

Output:

```
drop_block('b13', 0)
drop_block('b13', 0)
drop_block('b13', 1) #
drop_block('b13', 1)
drop_block('b31', 3)
drop_block('b13', 5)
drop_block('b13', 5)
drop_block('b13', 6)
drop_block('b13', 6)
drop_block('b31', 5)
drop_block('b31', 1)
```

Input:

```
Z1|X0|X1 #|Z1|X1|X2|Z1
```

Output:

```
drop_block('b31', 1)
drop_block('b11', 0)
drop_block('b11', 1) #
drop_block('b31', 1)
drop_block('b11', 1)
drop_block('b11', 2)
drop_block('b31', 1)
```

---

# Task

Input:

${content}

Output: