# Task Description

You are an expert architectural artisan in a mystical realm, entrusted with precisely reconstructing sacred letter blueprints. Your role is to act as a meticulous master builder who follows every detail of the given blueprint without deviation. When provided a single uppercase letter as input, you must respond by outputting the exact sequence of `drop_block` calls specified for that letter in the **Vocabulary** section below. Every line, including duplicates and repetitions, must be preserved in order and quantity, ensuring flawless fidelity to the original design.

---

# Input and Output

- **Input:** A single uppercase letter.  
- **Output:** A sequence of `drop_block()` calls that build the emblematic structure exactly as specified.

---

# Requirements

- Output the full sequence exactly as shown in the **Vocabulary** section below.  
- Do **not** skip, condense, reorder, or summarize any lines.  
- Preserve **every single line** from the corresponding Vocabulary entry **exactly as-is**, including all repeated and duplicate lines without any omission or collapsing.  
- Missing any repeated line or including any extra line beyond the Vocabulary counts will be considered an error.  
- Use triple backticks (```) to enclose the output sequence.  
- After generating the sequence, **carefully count and verify that the output contains the exact number of occurrences for each `drop_block` line**, matching the Vocabulary for the input letter exactly, with full preservation of all repeated lines and duplicates in order.  
- Only output the sequence in the specified format and do not include any additional text.

---

# Vocabulary

**INPUT: A**  
```
drop_block('b11', 8)
drop_block('b11', 10)
drop_block('b11', 8)
drop_block('b11', 10)
drop_block('b31', 9)
drop_block('b11', 8)
drop_block('b11', 10)
drop_block('b31', 9)
```

**INPUT: B**  
```
drop_block('b31', 9)
drop_block('b11', 11)
drop_block('b13', 8)
drop_block('b13', 10)
drop_block('b13', 11)
drop_block('b31', 9)
drop_block('b11', 11)
drop_block('b11', 8)
drop_block('b11', 10)
drop_block('b31', 9)
```

**INPUT: C**  
```
drop_block('b31', 10)
drop_block('b13', 9)
drop_block('b13', 10)
drop_block('b13', 9)
drop_block('b13', 10)
drop_block('b31', 10)
```

**INPUT: D**  
```
drop_block('b31', 10)
drop_block('b13', 12)
drop_block('b13', 12)
drop_block('b13', 9)
drop_block('b13', 10)
drop_block('b13', 9)
drop_block('b13', 10)
drop_block('b11', 12)
drop_block('b31', 10)
```

**INPUT: E**  
```
drop_block('b31', 10)
drop_block('b11', 9)
drop_block('b11', 10)
drop_block('b31', 10)
drop_block('b11', 9)
drop_block('b11', 10)
drop_block('b31', 10)
```

**INPUT: F**  
```
drop_block('b13', 10)
drop_block('b13', 11)
drop_block('b13', 10)
drop_block('b13', 11)
drop_block('b31', 11)
drop_block('b11', 10)
drop_block('b11', 11)
drop_block('b31', 11)
```

**INPUT: G**  
```
drop_block('b13', 6)
drop_block('b13', 7)
drop_block('b31', 9)
drop_block('b31', 9)
drop_block('b31', 12)
drop_block('b31', 12)
drop_block('b11', 12)
drop_block('b11', 13)
drop_block('b31', 12)
drop_block('b13', 6)
drop_block('b13', 7)
drop_block('b11', 6)
drop_block('b11', 7)
drop_block('b31', 7)
```

**INPUT: H**  
```
drop_block('b13', 9)
drop_block('b13', 11)
drop_block('b31', 10)
drop_block('b13', 9)
drop_block('b13', 11)
```

**INPUT: I**  
```
drop_block('b13', 10)
drop_block('b13', 10)
```

**INPUT: J**  
```
drop_block('b11', 10)
drop_block('b13', 11)
drop_block('b13', 11)
```

**INPUT: K**  
```
drop_block('b13', 9)
drop_block('b13', 11)
drop_block('b11', 12)
drop_block('b31', 10)
drop_block('b31', 11)
drop_block('b13', 9)
drop_block('b11', 12)
drop_block('b11', 12)
```

**INPUT: L**  
```
drop_block('b13', 10)
drop_block('b13', 10)
drop_block('b11', 11)
```

**INPUT: M**  
```
drop_block('b13', 5)
drop_block('b13', 6)
drop_block('b13', 8)
drop_block('b13', 10)
drop_block('b13', 11)
drop_block('b13', 13)
drop_block('b13', 14)
drop_block('b13', 5)
drop_block('b13', 6)
drop_block('b13', 8)
drop_block('b13', 10)
drop_block('b13', 11)
drop_block('b13', 13)
drop_block('b13', 14)
drop_block('b31', 6)
drop_block('b11', 8)
drop_block('b31', 10)
drop_block('b31', 13)
```

**INPUT: N**  
```
drop_block('b13', 9)
drop_block('b13', 11)
drop_block('b13', 9)
drop_block('b13', 11)
drop_block('b31', 10)
drop_block('b11', 9)
drop_block('b11', 11)
```

**INPUT: O**  
```
drop_block('b31', 10)
drop_block('b11', 9)
drop_block('b11', 11)
drop_block('b11', 9)
drop_block('b11', 11)
drop_block('b11', 9)
drop_block('b11', 11)
drop_block('b31', 10)
```

**INPUT: P**  
```
drop_block('b13', 9)
drop_block('b13', 10)
drop_block('b13', 9)
drop_block('b13', 10)
drop_block('b31', 10)
drop_block('b13', 9)
drop_block('b13', 11)
drop_block('b31', 10)
```

**INPUT: Q**  
```
drop_block('b31', 10)
drop_block('b13', 9)
drop_block('b13', 9)
drop_block('b31', 11)
drop_block('b11', 11)
drop_block('b13', 11)
drop_block('b11', 11)
drop_block('b31', 10)
```

**INPUT: R**  
```
drop_block('b13', 7)
drop_block('b13', 8)
drop_block('b13', 10)
drop_block('b31', 8)
drop_block('b13', 7)
drop_block('b13', 9)
drop_block('b11', 10)
drop_block('b31', 8)
```

**INPUT: S**  
```
drop_block('b31', 9)
drop_block('b11', 9)
drop_block('b11', 10)
drop_block('b31', 9)
drop_block('b11', 8)
drop_block('b11', 9)
drop_block('b31', 9)
```

**INPUT: T**  
```
drop_block('b13', 10)
drop_block('b13', 10)
drop_block('b31', 10)
```

**INPUT: U**  
```
drop_block('b31', 11)
drop_block('b31', 8)
drop_block('b13', 7)
drop_block('b13', 12)
```

**INPUT: V**  
```
drop_block('b13', 9)
drop_block('b13', 8)
drop_block('b13', 10)
drop_block('b13', 7)
drop_block('b13', 11)
drop_block('b31', 7)
drop_block('b31', 11)
drop_block('b11', 9)
drop_block('b31', 9)
drop_block('b31', 9)
drop_block('b13', 6)
drop_block('b13', 7)
drop_block('b13', 11)
drop_block('b13', 12)
drop_block('b13', 6)
drop_block('b13', 7)
drop_block('b13', 11)
drop_block('b13', 12)
```

**INPUT: W**  
```
drop_block('b11', 9)
drop_block('b11', 10)
drop_block('b11', 11)
drop_block('b11', 12)
drop_block('b31', 9)
drop_block('b31', 12)
drop_block('b11', 10)
drop_block('b11', 11)
drop_block('b11', 9)
drop_block('b11', 12)
drop_block('b11', 9)
drop_block('b11', 12)
drop_block('b11', 9)
drop_block('b11', 12)
drop_block('b11', 9)
drop_block('b11', 12)
drop_block('b11', 9)
drop_block('b11', 12)
```

**INPUT: X**  
```
drop_block('b13', 9)
drop_block('b13', 11)
drop_block('b31', 10)
drop_block('b11', 10)
drop_block('b31', 10)
drop_block('b13', 9)
drop_block('b13', 11)
```

**INPUT: Y**  
```
drop_block('b13', 9)
drop_block('b31', 9)
drop_block('b11', 8)
drop_block('b11', 10)
drop_block('b11', 8)
drop_block('b11', 10)
drop_block('b11', 8)
drop_block('b11', 10)
```

**INPUT: Z**  
```
drop_block('b31', 8)
drop_block('b31', 8)
drop_block('b31', 11)
drop_block('b31', 11)
drop_block('b11', 7)
drop_block('b11', 8)
drop_block('b31', 8)
drop_block('b31', 8)
drop_block('b11', 8)
drop_block('b11', 9)
drop_block('b31', 8)
drop_block('b31', 8)
```

---

# Examples

Input: E  
Output:  
```
drop_block('b31', 10)
drop_block('b11', 9)
drop_block('b11', 10)
drop_block('b31', 10)
drop_block('b11', 9)
drop_block('b11', 10)
drop_block('b31', 10)
```

Input: G  
Output:  
```
drop_block('b13', 6)
drop_block('b13', 7)
drop_block('b31', 9)
drop_block('b31', 9)
drop_block('b31', 12)
drop_block('b31', 12)
drop_block('b11', 12)
drop_block('b11', 13)
drop_block('b31', 12)
drop_block('b13', 6)
drop_block('b13', 7)
drop_block('b11', 6)
drop_block('b11', 7)
drop_block('b31', 7)
```

Input: O  
Output:  
```
drop_block('b31', 10)
drop_block('b11', 9)
drop_block('b11', 11)
drop_block('b11', 9)
drop_block('b11', 11)
drop_block('b11', 9)
drop_block('b11', 11)
drop_block('b31', 10)
```

---

# Your Task

Input: ${content}

Output: