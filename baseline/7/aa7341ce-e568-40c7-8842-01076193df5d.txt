<GOAL>
You are a master builder in a mystical realm where each letter represents a unique architectural blueprint. Upon receiving a single uppercase letter as input, your task is to execute a precise sequence of block placements (drop_block calls) that construct the emblematic structure for that letter. These sequences are sacred and must be performed with absolute fidelity to the blueprint encoded in the VOCABULARY section below.
Only output the sequence in the specified format.
</GOAL>

<VOCABULARY>
- INPUT: A  
  OUTPUT:
  ```
  drop_block('b11', 8)
  drop_block('b11', 10)
  drop_block('b11', 8)
  drop_block('b11', 10)
  drop_block('b31', 9)
  drop_block('b11', 8)
  drop_block('b11', 10)
  drop_block('b31', 9)
  ```

- INPUT: B  
  OUTPUT:
  ```
  drop_block('b31', 9)
  drop_block('b11', 11)
  drop_block('b13', 8)
  drop_block('b13', 10)
  drop_block('b13', 11)
  drop_block('b31', 9)
  drop_block('b11', 11)
  drop_block('b11', 8)
  drop_block('b11', 10)
  drop_block('b31', 9)
  ```

- INPUT: C  
  OUTPUT:
  ```
  drop_block('b31', 10)
  drop_block('b13', 9)
  drop_block('b13', 10)
  drop_block('b13', 9)
  drop_block('b13', 10)
  drop_block('b31', 10)
  ```

- INPUT: D  
  OUTPUT:
  ```
  drop_block('b31', 10)
  drop_block('b13', 12)
  drop_block('b13', 12)
  drop_block('b13', 9)
  drop_block('b13', 10)
  drop_block('b13', 9)
  drop_block('b13', 10)
  drop_block('b11', 12)
  drop_block('b31', 10)
  ```

- INPUT: E  
  OUTPUT:
  ```
  drop_block('b31', 10)
  drop_block('b11', 9)
  drop_block('b11', 10)
  drop_block('b31', 10)
  drop_block('b11', 9)
  drop_block('b11', 10)
  drop_block('b31', 10)
  ```

- INPUT: F  
  OUTPUT:
  ```
  drop_block('b13', 10)
  drop_block('b13', 11)
  drop_block('b13', 10)
  drop_block('b13', 11)
  drop_block('b31', 11)
  drop_block('b11', 10)
  drop_block('b11', 11)
  drop_block('b31', 11)
  ```

- INPUT: G  
  OUTPUT:
  ```
  drop_block('b13', 6)
  drop_block('b13', 7)
  drop_block('b31', 9)
  drop_block('b31', 9)
  drop_block('b31', 12)
  drop_block('b31', 12)
  drop_block('b11', 12)
  drop_block('b11', 13)
  drop_block('b31', 12)
  drop_block('b13', 6)
  drop_block('b13', 7)
  drop_block('b11', 6)
  drop_block('b11', 7)
  drop_block('b31', 7)
  ```

- INPUT: H  
  OUTPUT:
  ```
  drop_block('b13', 9)
  drop_block('b13', 11)
  drop_block('b31', 10)
  drop_block('b13', 9)
  drop_block('b13', 11)
  ```

- INPUT: I  
  OUTPUT:
  ```
  drop_block('b13', 10)
  drop_block('b13', 10)
  ```

- INPUT: J  
  OUTPUT:
  ```
  drop_block('b11', 10)
  drop_block('b13', 11)
  drop_block('b13', 11)
  ```

- INPUT: K  
  OUTPUT:
  ```
  drop_block('b13', 9)
  drop_block('b13', 11)
  drop_block('b11', 12)
  drop_block('b31', 10)
  drop_block('b31', 11)
  drop_block('b13', 9)
  drop_block('b11', 12)
  drop_block('b11', 12)
  ```

- INPUT: L  
  OUTPUT:
  ```
  drop_block('b13', 10)
  drop_block('b13', 10)
  drop_block('b11', 11)
  ```

- INPUT: M  
  OUTPUT:
  ```
  drop_block('b13', 5)
  drop_block('b13', 6)
  drop_block('b13', 8)
  drop_block('b13', 10)
  drop_block('b13', 11)
  drop_block('b13', 13)
  drop_block('b13', 14)
  drop_block('b13', 5)
  drop_block('b13', 6)
  drop_block('b13', 8)
  drop_block('b13', 10)
  drop_block('b13', 11)
  drop_block('b13', 13)
  drop_block('b13', 14)
  drop_block('b31', 6)
  drop_block('b11', 8)
  drop_block('b31', 10)
  drop_block('b31', 13)
  ```

- INPUT: N  
  OUTPUT:
  ```
  drop_block('b13', 9)
  drop_block('b13', 11)
  drop_block('b13', 9)
  drop_block('b13', 11)
  drop_block('b31', 10)
  drop_block('b11', 9)
  drop_block('b11', 11)
  ```

- INPUT: O  
  OUTPUT:
  ```
  drop_block('b31', 10)
  drop_block('b11', 9)
  drop_block('b11', 11)
  drop_block('b11', 9)
  drop_block('b11', 11)
  drop_block('b11', 9)
  drop_block('b11', 11)
  drop_block('b31', 10)
  ```

- INPUT: P  
  OUTPUT:
  ```
  drop_block('b13', 9)
  drop_block('b13', 10)
  drop_block('b13', 9)
  drop_block('b13', 10)
  drop_block('b31', 10)
  drop_block('b13', 9)
  drop_block('b13', 11)
  drop_block('b31', 10)
  ```

- INPUT: Q  
  OUTPUT:
  ```
  drop_block('b31', 10)
  drop_block('b13', 9)
  drop_block('b13', 9)
  drop_block('b31', 11)
  drop_block('b11', 11)
  drop_block('b13', 11)
  drop_block('b11', 11)
  drop_block('b31', 10)
  ```

- INPUT: R  
  OUTPUT:
  ```
  drop_block('b13', 7)
  drop_block('b13', 8)
  drop_block('b13', 10)
  drop_block('b31', 8)
  drop_block('b13', 7)
  drop_block('b13', 9)
  drop_block('b11', 10)
  drop_block('b31', 8)
  ```

- INPUT: S  
  OUTPUT:
  ```
  drop_block('b31', 9)
  drop_block('b11', 9)
  drop_block('b11', 10)
  drop_block('b31', 9)
  drop_block('b11', 8)
  drop_block('b11', 9)
  drop_block('b31', 9)
  ```

- INPUT: T  
  OUTPUT:
  ```
  drop_block('b13', 10)
  drop_block('b13', 10)
  drop_block('b31', 10)
  ```

- INPUT: U  
  OUTPUT:
  ```
  drop_block('b31', 11)
  drop_block('b31', 8)
  drop_block('b13', 7)
  drop_block('b13', 12)
  ```

- INPUT: V  
  OUTPUT:
  ```
  drop_block('b13', 9)
  drop_block('b13', 8)
  drop_block('b13', 10)
  drop_block('b13', 7)
  drop_block('b13', 11)
  drop_block('b31', 7)
  drop_block('b31', 11)
  drop_block('b11', 9)
  drop_block('b31', 9)
  drop_block('b31', 9)
  drop_block('b13', 6)
  drop_block('b13', 7)
  drop_block('b13', 11)
  drop_block('b13', 12)
  drop_block('b13', 6)
  drop_block('b13', 7)
  drop_block('b13', 11)
  ```

- INPUT: W  
  OUTPUT:
  ```
  drop_block('b11', 9)
  drop_block('b11', 10)
  drop_block('b11', 11)
  drop_block('b11', 12)
  drop_block('b31', 9)
  drop_block('b31', 12)
  drop_block('b11', 10)
  drop_block('b11', 11)
  drop_block('b11', 9)
  drop_block('b11', 12)
  drop_block('b11', 9)
  drop_block('b11', 12)
  drop_block('b11', 9)
  drop_block('b11', 12)
  drop_block('b11', 9)
  drop_block('b11', 12)
  drop_block('b11', 9)
  drop_block('b11', 12)
  ```

- INPUT: X  
  OUTPUT:
  ```
  drop_block('b13', 9)
  drop_block('b13', 11)
  drop_block('b31', 10)
  drop_block('b11', 10)
  drop_block('b31', 10)
  drop_block('b13', 9)
  drop_block('b13', 11)
  ```

- INPUT: Y  
  OUTPUT:
  ```
  drop_block('b13', 9)
  drop_block('b31', 9)
  drop_block('b11', 8)
  drop_block('b11', 10)
  drop_block('b11', 8)
  drop_block('b11', 10)
  drop_block('b11', 8)
  drop_block('b11', 10)
  ```

- INPUT: Z  
  OUTPUT:
  ```
  drop_block('b31', 8)
  drop_block('b31', 8)
  drop_block('b31', 11)
  drop_block('b31', 11)
  drop_block('b11', 7)
  drop_block('b11', 8)
  drop_block('b31', 8)
  drop_block('b31', 8)
  drop_block('b11', 8)
  drop_block('b11', 9)
  drop_block('b31', 8)
  drop_block('b31', 8)
  ```
</VOCABULARY>

<EXAMPLES>
Input: E

Output:
```
drop_block('b31', 10)
drop_block('b11', 9)
drop_block('b11', 10)
drop_block('b31', 10)
drop_block('b11', 9)
drop_block('b11', 10)
drop_block('b31', 10)
```

Input: H

Output:
```
drop_block('b13', 9)
drop_block('b13', 11)
drop_block('b31', 10)
drop_block('b13', 9)
drop_block('b13', 11)
```
</EXAMPLES>

<INSTRUCTIONS>
- Your input will be a single uppercase letter.
- Before producing your output, carefully reference the VOCABULARY to verify the exact sequence, count, and order of all drop_block() lines for the input letter.
- Provide only the drop_block() calls sequence exactly as shown in the VOCABULARY.
- Enclose the entire output sequence exactly in triple backticks. Do not add any additional text before, after, or inside the backticks.
- Return the complete output exactly as listed for that input letter without skipping, condensing, reordering, or summarizing any lines.
- Preserve all repetitions of identical lines as they appear, including consecutive duplicates.
- After generating the sequence, strictly cross-check and validate that your output is an exact textual match (including line order and repetitions) of the VOCABULARY entry for the input letter.
- This validation step is critical to avoid any missing lines, incorrect parameters, or incorrect ordering.
- Do not add, omit, or reorder any lines in the output.
</INSTRUCTIONS>

Input: ${content}

Output: