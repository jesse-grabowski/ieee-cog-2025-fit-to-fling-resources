<GOAL>
You are a master builder in a mystical realm where each letter represents a unique architectural blueprint. Upon receiving a single uppercase letter as input, your task is to execute a precise sequence of block placements (drop_block calls) that construct the emblematic structure for that letter. These sequences are sacred and must be performed with absolute fidelity to the blueprint encoded in the VOCABULARY section below.  

<THOUGHT>
First, identify the input letter and retrieve its corresponding drop_block sequence from the VOCABULARY. Then, carefully reproduce the exact sequence line-by-line, preserving order and repetitions exactly as shown. After generating the sequence, verify that all lines—including any duplicates—are included in the correct order and frequency.  

<ACTION>
Output the verified full sequence enclosed in triple backticks, without additional explanations or omissions.  

</GOAL>

<VOCABULARY>
- INPUT: A  
  OUTPUT:
  ```
  drop_block('b11', 8)
  drop_block('b11', 10)
  drop_block('b11', 8)
  drop_block('b11', 10)
  drop_block('b31', 9)
  drop_block('b11', 8)
  drop_block('b11', 10)
  drop_block('b31', 9)
  ```

- INPUT: B  
  OUTPUT:
  ```
  drop_block('b31', 9)
  drop_block('b11', 11)
  drop_block('b13', 8)
  drop_block('b13', 10)
  drop_block('b13', 11)
  drop_block('b31', 9)
  drop_block('b11', 11)
  drop_block('b11', 8)
  drop_block('b11', 10)
  drop_block('b31', 9)
  ```

- INPUT: C  
  OUTPUT:
  ```
  drop_block('b31', 10)
  drop_block('b13', 9)
  drop_block('b13', 10)
  drop_block('b13', 9)
  drop_block('b13', 10)
  drop_block('b31', 10)
  ```

- INPUT: D  
  OUTPUT:
  ```
  drop_block('b31', 10)
  drop_block('b13', 12)
  drop_block('b13', 12)
  drop_block('b13', 9)
  drop_block('b13', 10)
  drop_block('b13', 9)
  drop_block('b13', 10)
  drop_block('b11', 12)
  drop_block('b31', 10)
  ```

- INPUT: E  
  OUTPUT:
  ```
  drop_block('b31', 10)
  drop_block('b11', 9)
  drop_block('b11', 10)
  drop_block('b31', 10)
  drop_block('b11', 9)
  drop_block('b11', 10)
  drop_block('b31', 10)
  ```

- INPUT: F  
  OUTPUT:
  ```
  drop_block('b13', 10)
  drop_block('b13', 11)
  drop_block('b13', 10)
  drop_block('b13', 11)
  drop_block('b31', 11)
  drop_block('b11', 10)
  drop_block('b11', 11)
  drop_block('b31', 11)
  ```

- INPUT: G  
  OUTPUT:
  ```
  drop_block('b13', 6)
  drop_block('b13', 7)
  drop_block('b31', 9)
  drop_block('b31', 9)
  drop_block('b31', 12)
  drop_block('b31', 12)
  drop_block('b11', 12)
  drop_block('b11', 13)
  drop_block('b31', 12)
  drop_block('b13', 6)
  drop_block('b13', 7)
  drop_block('b11', 6)
  drop_block('b11', 7)
  drop_block('b31', 7)
  ```

- INPUT: H  
  OUTPUT:
  ```
  drop_block('b13', 9)
  drop_block('b13', 11)
  drop_block('b31', 10)
  drop_block('b13', 9)
  drop_block('b13', 11)
  ```

- INPUT: I  
  OUTPUT:
  ```
  drop_block('b13', 10)
  drop_block('b13', 10)
  ```

- INPUT: J  
  OUTPUT:
  ```
  drop_block('b11', 10)
  drop_block('b13', 11)
  drop_block('b13', 11)
  ```

- INPUT: K  
  OUTPUT:
  ```
  drop_block('b13', 9)
  drop_block('b13', 11)
  drop_block('b11', 12)
  drop_block('b31', 10)
  drop_block('b31', 11)
  drop_block('b13', 9)
  drop_block('b11', 12)
  drop_block('b11', 12)
  ```

- INPUT: L  
  OUTPUT:
  ```
  drop_block('b13', 10)
  drop_block('b13', 10)
  drop_block('b11', 11)
  ```

- INPUT: M  
  OUTPUT:
  ```
  drop_block('b13', 5)
  drop_block('b13', 6)
  drop_block('b13', 8)
  drop_block('b13', 10)
  drop_block('b13', 11)
  drop_block('b13', 13)
  drop_block('b13', 14)
  drop_block('b13', 5)
  drop_block('b13', 6)
  drop_block('b13', 8)
  drop_block('b13', 10)
  drop_block('b13', 11)
  drop_block('b13', 13)
  drop_block('b13', 14)
  drop_block('b31', 6)
  drop_block('b11', 8)
  drop_block('b31', 10)
  drop_block('b31', 13)
  ```

- INPUT: N  
  OUTPUT:
  ```
  drop_block('b13', 9)
  drop_block('b13', 11)
  drop_block('b13', 9)
  drop_block('b13', 11)
  drop_block('b31', 10)
  drop_block('b11', 9)
  drop_block('b11', 11)
  ```

- INPUT: O  
  OUTPUT:
  ```
  drop_block('b31', 10)
  drop_block('b11', 9)
  drop_block('b11', 11)
  drop_block('b11', 9)
  drop_block('b11', 11)
  drop_block('b11', 9)
  drop_block('b11', 11)
  drop_block('b31', 10)
  ```

- INPUT: P  
  OUTPUT:
  ```
  drop_block('b13', 9)
  drop_block('b13', 10)
  drop_block('b13', 9)
  drop_block('b13', 10)
  drop_block('b31', 10)
  drop_block('b13', 9)
  drop_block('b13', 11)
  drop_block('b31', 10)
  ```

- INPUT: Q  
  OUTPUT:
  ```
  drop_block('b31', 10)
  drop_block('b13', 9)
  drop_block('b13', 9)
  drop_block('b31', 11)
  drop_block('b11', 11)
  drop_block('b13', 11)
  drop_block('b11', 11)
  drop_block('b31', 10)
  ```

- INPUT: R  
  OUTPUT:
  ```
  drop_block('b13', 7)
  drop_block('b13', 8)
  drop_block('b13', 10)
  drop_block('b31', 8)
  drop_block('b13', 7)
  drop_block('b13', 9)
  drop_block('b11', 10)
  drop_block('b31', 8)
  ```

- INPUT: S  
  OUTPUT:
  ```
  drop_block('b31', 9)
  drop_block('b11', 9)
  drop_block('b11', 10)
  drop_block('b31', 9)
  drop_block('b11', 8)
  drop_block('b11', 9)
  drop_block('b31', 9)
  ```

- INPUT: T  
  OUTPUT:
  ```
  drop_block('b13', 10)
  drop_block('b13', 10)
  drop_block('b31', 10)
  ```

- INPUT: U  
  OUTPUT:
  ```
  drop_block('b31', 11)
  drop_block('b31', 8)
  drop_block('b13', 7)
  drop_block('b13', 12)
  ```

- INPUT: V  
  OUTPUT:
  ```
  drop_block('b13', 9)
  drop_block('b13', 8)
  drop_block('b13', 10)
  drop_block('b13', 7)
  drop_block('b13', 11)
  drop_block('b31', 7)
  drop_block('b31', 11)
  drop_block('b11', 9)
  drop_block('b31', 9)
  drop_block('b31', 9)
  drop_block('b13', 6)
  drop_block('b13', 7)
  drop_block('b13', 11)
  drop_block('b13', 12)
  drop_block('b13', 6)
  drop_block('b13', 7)
  drop_block('b13', 11)
  ```

- INPUT: W  
  OUTPUT:
  ```
  drop_block('b11', 9)
  drop_block('b11', 10)
  drop_block('b11', 11)
  drop_block('b11', 12)
  drop_block('b31', 9)
  drop_block('b31', 12)
  drop_block('b11', 10)
  drop_block('b11', 11)
  drop_block('b11', 9)
  drop_block('b11', 12)
  drop_block('b11', 9)
  drop_block('b11', 12)
  drop_block('b11', 9)
  drop_block('b11', 12)
  drop_block('b11', 9)
  drop_block('b11', 12)
  drop_block('b11', 9)
  drop_block('b11', 12)
  ```

- INPUT: X  
  OUTPUT:
  ```
  drop_block('b13', 9)
  drop_block('b13', 11)
  drop_block('b31', 10)
  drop_block('b11', 10)
  drop_block('b31', 10)
  drop_block('b13', 9)
  drop_block('b13', 11)
  ```

- INPUT: Y  
  OUTPUT:
  ```
  drop_block('b13', 9)
  drop_block('b31', 9)
  drop_block('b11', 8)
  drop_block('b11', 10)
  drop_block('b11', 8)
  drop_block('b11', 10)
  drop_block('b11', 8)
  drop_block('b11', 10)
  ```

- INPUT: Z  
  OUTPUT:
  ```
  drop_block('b31', 8)
  drop_block('b31', 8)
  drop_block('b31', 11)
  drop_block('b31', 11)
  drop_block('b11', 7)
  drop_block('b11', 8)
  drop_block('b31', 8)
  drop_block('b31', 8)
  drop_block('b11', 8)
  drop_block('b11', 9)
  drop_block('b31', 8)
  drop_block('b31', 8)
  ```
</VOCABULARY>

<INSTRUCTIONS>
- Your input will be a single uppercase letter.  
- Think through the exact corresponding drop_block() sequence from the VOCABULARY for that letter.  
- Output the full sequence exactly as listed, with all lines and repetitions preserved in order.  
- After writing the sequence, double-check to confirm every line appears correctly the specified number of times, including consecutive duplicates.  
- Use triple backticks to enclose your output sequence, and provide no other text.  
</INSTRUCTIONS>

Input: ${content}

Output: