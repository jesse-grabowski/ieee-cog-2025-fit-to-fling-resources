To convert the input string into function calls according to the given mappings and format, you can implement a parsing agent using Python without utilizing ord() or chr(). Here's a sample implementation with explanations:

1. Define dictionaries for symbolic-to-function call mapping (as mentioned in instructions) - `block_mapping` and character encoding function (`letter_selector`).
2. Split the input string by `'|'` to process each token separately, maintaining order.
3. Iterate over the output of step 2:
     1. For every element at odd positions, convert that letter to uppercase using `letter_selector` and apply block mapping for "Y", getting "b13". Convert the number (integer part) by converting the string numeric representation into an integer. Then call `drop_block(<mapped block>, <number>)`.
     2. For every element at even positions, check if it has a `#` and format accordingly using previously collected tokens or new ones while maintaining the order as per rules. If there's no `#`, just prepare for output by storing these elements to be processed after `#`. 
4. After processing all characters until encountering `#`, merge and process stored elements (even positions) with `drop_block(...)` calls, inserting `'#'` when appropriate as guided by the `#` symbol in input string. Continue this merging pattern for the entire input sequence, ensuring order is maintained.
5. Format and return processed inputs wrapped in triple backticks to match the output requirement.

Here's a Python script that implements these steps:

```python
def letter_selector(letter, number):
    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    result = [' ', '\n', ''][number] if 1 < number < 3 else list(alphabet)[abs(number) - 1] # Special handling for space and newline within selected range as per the instructions.
    
    return letter + result if abs(number) > len(alphabet) // 2 else result

def block_drop_simulate(input_string):
    input_tokens = input_string.strip('`').split('|')
    drop_block_calls = []
    nums, mapping = '0123456789', {'Y': 'b13', 'X': 'b11', 'Z': 'b31'}
    
    for i in range(len(input_tokens)):
        try: token = input_tokens[i].strip().upper() # Convert tokens to uppercase as per instructions.
        except ValueError: continue # Skip invalid characters
        
        if not (token[0] in 'YXZ' and token[1:] in nums): continue  # Check validity of each token.
        
        mapped_block, number = mapping[token[0]], int(token[1])

        # Special case for line breaks (`` backticks`) at even indices handling `#`.
        if i % 2 == 1:
            drop_block_calls[-1] += f'\n{letter_selector(" ", number)}' if '#' in input_tokens[i-1][0] else ''
        
        # Add to function call list or store it for later.
        if i % 2 == 0: drop_block_calls[-1] += f'\ndrop_block("{mapped_block}", {number})' # This can be adjusted based on exact format requirements and token placement relative to line breaks.
        else: drop_block_calls[-1].append(letter_selector(*token))
        
    # Process stored elements for tokens in line break positions while inserting '#'.
    
    return '```' + '\n'.join(drop_block_calls).replace('\n', '\n```') + '```'  # Format with triple backticks.
    
input = 'Y0|Y0|Y1\\#|X3|Z5|Y6'
output = block_drop_simulate(input)
print(output)
```

This implementation should fulfill the given parsing agent role, but note that some parts require adjustments based on clarifications regarding token handling in line break positions and exact expected output format.

Keep in mind that my interpretation may be imperfect due to ambiguities present in your original problem statement, so this code could need further refinement for strict adherence to all rules you've provided.